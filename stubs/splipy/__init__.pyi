from collections.abc import Sequence

from numpy import ndarray
from numpy.typing import ArrayLike

class SplineObject:
    rational: bool
    controlpoints: ndarray
    bases: list[BSplineBasis]
    def __init__(
        self, bases: Sequence[BSplineBasis], coeffs: ArrayLike, rational: bool = ..., raw: bool = ...
    ) -> None: ...
    def corners(self) -> ndarray: ...
    def __call__(self, *args: ndarray) -> ndarray: ...

class BSplineBasis:
    def __init__(self, order: int, knots: ArrayLike) -> None: ...
    def num_functions(self) -> int: ...
    def knot_spans(self) -> ndarray: ...
